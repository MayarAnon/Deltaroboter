const Display = (props) =>{
  return(
    <div className="flex items-center justify-center rounded-lg bg-gray-800 text-white p-4">
      <p className="text-xl font-bold">Artikel: {props.name} Preis: {props.price}€</p>
      <button onClick={() =>{props.delete(props.name)}} className="py-2 px-4 bg-blue-500 text-white font-semibold rounded-lg shadow-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-400 focus:ring-opacity-75 border border-black ml-80">Delete: {props.name}</button>
    </div>
  );
}


const List = () =>{
  const [list,setList] = useState([{name: "default",price: "0"}]);
  const [updateCount, setUpdateCount] = useState(0);
  const [siteState,setSiteState] = useState(0);

  const bootUp = () =>{
    fetch('/api/showdata')
      .then(response => response.json())
      .then(jsonData => {
      let data = jsonData;
      console.log('Data loaded:', data);
      let transfer = [];
      for(let object = 0;object < data.length; object ++){
        transfer.push({name: data[object].name, price: data[object].price});
      }
      setList(transfer);
  })
  .catch(error => console.error(error));

  }

  if(siteState == 0){
    bootUp();
    setSiteState(1)
  }

  const changeList = (parms) => {
    let currentList = [...list];
    currentList.push({ name: parms.name, price: parms.price });
    setList(currentList);
    setUpdateCount(updateCount + 1); // trigger update
  };

  let totalPrice = 0

  const sendData = async ()=>{
    axios.post('/api/data',list, {
      headers: {
        'Content-Type': 'application/json'
      }
    })
    .then(response => {
      console.log(response.data);
    })
    .catch(error => {
      console.error(error);
    });
  }

 
  
  const deleteItem = (name) =>{
    
    const index = list.findIndex((item) => item.name === name);
    if (index !== -1) {
      const newList = [...list];
      newList.splice(index, 1);
      setList(newList);
    }
  }

  return(
    <>
      <ItemAddModule updateList={changeList}/>
      <h1>Liste</h1>
      {list.map((item, index) => {
        totalPrice = totalPrice + Number(item.price)
        return <Display key={index} name={item.name} price={item.price} delete={deleteItem} />;
      })}
      <h1>Total: {totalPrice}€</h1>
      <button onClick={sendData} className="py-2 px-4 bg-blue-500 text-white font-semibold rounded-lg shadow-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-400 focus:ring-opacity-75">Speichern</button>
    </>
  )
}



const ItemAddModule = (props) =>{
  const [isOpen,setIsOpen] = useState(false);

  return(
    <>
      <button onClick={() => setIsOpen(true)}>Items hinzufügen</button>
      <Itemadder state={isOpen} closeAdder={()=>{setIsOpen(false)}}  callback={(updateData) =>props.updateList(updateData)}/>
    </>
  );
}

const Itemadder = (props) =>{
  
  const [name,setName] = useState("");
  const [price,setPrice] = useState(0)

  const sendData = () =>{
    props.callback({name:name ,price:price})
    setName("");
    setPrice(0)
  }
  
  if(!props.state) return null

  

  return(
    <>
      
      <h1 className="">Erstelle ein neues Item</h1>
      <div>
        <p>Aktueller Arktikel: {name}</p>
        <p>Aktueller Preis:{price}</p>
      </div>
      <div>
        <lable htmlFor='nameItem'>Artikelname</lable>
        <input type='text' id='nameItem' onChange={(event) => setName(event.target.value)}></input>
        <label htmlFor='priceItem'>Preis</label>
        <input type='number' id='priceItem'onChange={(event) => setPrice(event.target.value)}></input>
        <button onClick={sendData}>hinzufügen</button>
      </div>
      
      <button onClick={() => props.closeAdder()}>schließen</button>
    </>
  );
}